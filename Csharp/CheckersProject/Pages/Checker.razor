@using CheckersProject.Data;

@page "/checker"

<PageTitle>Checker</PageTitle>

<h1>Welcome To Checkers!</h1>

@code {

    @* create the chucker board object *@

    CheckerBoard newBoard = new CheckerBoard(8, 8);

    @* create the checker object *@
    List<CheckerClass> blackCheckers = new List<CheckerClass>();
    List<CheckerClass> whiteCheckers = new List<CheckerClass>();

    CheckerClass? activeChecker = null;

    @* creating a list with toupls *@
    List<(int row, int column)> cellsPossible = new();

    @* List<int> rowsPossible = new List<int>(); *@
    @* List<int> columnsPossible = new List<int>(); *@

    @* Evaluate the cells around the checker *@

    void EvaluateCheckerSpots()

    {
        cellsPossible.Clear();

        @* columnsPossible.Clear(); *@
        if (activeChecker != null)
        {
            List<int> rowsPossible = new List<int>();
            if (activeChecker.Direction == CheckerDirection.Down ||
            activeChecker.Direction == CheckerDirection.Both)
            {
                rowsPossible.Add(activeChecker.Row + 1);
            }

            if (activeChecker.Direction == CheckerDirection.Up ||
            activeChecker.Direction == CheckerDirection.Both)
            {
                rowsPossible.Add(activeChecker.Row - 1);
            }
            @* add only the possable cells that the checker can move using the function below to the cellsPossible list row,column *@
            foreach (int row in rowsPossible)
            {
                EvaluateSpot(row, activeChecker.Column - 1);

                EvaluateSpot(row, activeChecker.Column + 1);
            }
        }
    }



    void EvaluateSpot(int row, int column, bool firstTimeJump = true)

    {
        @* if there is black checler at that column the blackckecer will have value else it will be null *@
        var blackChecker = blackCheckers.FirstOrDefault(n => n.Column == column && n.Row == row);
        
        var whiteChecker = whiteCheckers.FirstOrDefault(n => n.Column == column && n.Row == row);

        if (blackChecker == null && whiteChecker == null)
        {
            cellsPossible.Add((row, column));
        }
        @* Jump the checker *@

        else if (firstTimeJump)
        {
            {
                if ((whiteTurn && blackChecker != null) || (!whiteTurn && whiteChecker != null))
                {
                    int coulmnDiff = column - activeChecker.Column;
                    Console.WriteLine(column);
                    Console.WriteLine(activeChecker.Column);
                    Console.WriteLine(coulmnDiff);

                    int rowDiff = row - activeChecker.Row;
                    Console.WriteLine(row);
                    Console.WriteLine(activeChecker.Row);
                    Console.WriteLine(rowDiff);

                    EvaluateSpot(row + rowDiff, column + coulmnDiff);
                }
            }
        }
    }





    void MoveChecker(int row, int column)
    {
        if (activeChecker != null)
        {
            Console.WriteLine($"MoveChecker {activeChecker.Color} {activeChecker.Direction} {whiteCheckers.Count()} {blackCheckers.Count()}");
        }

        bool canMoveHere = cellsPossible.Contains((row, column));

        if (!canMoveHere)
        {
            return;
        }
        if (activeChecker != null)
        {


            @* remove cheker after jump *@

            if (Math.Abs(activeChecker.Column - column) == 2)
            {
                int jumpColumn = (activeChecker.Column + column) / 2;
                int jumpRow = (activeChecker.Row + row) / 2;
                @* finding which checker is being jumped so we can remove it*@
                var blackchecker = blackCheckers.FirstOrDefault(n => n.Row == jumpRow && n.Column == jumpColumn);
                @* remove the chceker from the board *@
                if (blackchecker != null)
                {
                    blackCheckers.Remove(blackchecker);
                }

                @* finding which checker is being jumped so we can remove it*@
                var whitechecker = whiteCheckers.FirstOrDefault(n => n.Row == jumpRow && n.Column == jumpColumn);
                @* remove the chceker from the board *@
                if (whitechecker != null)
                {
                    whiteCheckers.Remove(whitechecker);
                }
                if (activeChecker != null)
        {
            Console.WriteLine($"Count {activeChecker.Color}, {whiteCheckers.Count()}, {blackCheckers.Count()}");
        }
            }
            @* set the chceker postion *@
            activeChecker.Column = column;
            activeChecker.Row = row;
            
            @* we will check if the checker is at the last row if true we will set the direction to both *@
            @* chcek the checker color white and it at the last row -> number 0 *@
            @* update the checker to a king *@
            if (activeChecker.Row == 0 && activeChecker.Color == "white")
            {
                activeChecker.Direction = CheckerDirection.Both;
            }

            if (activeChecker.Row == 7 && activeChecker.Color == "black")
            {
                activeChecker.Direction = CheckerDirection.Both;
            }
            
            activeChecker = null;
            @* switchs the turn *@
            whiteTurn = !whiteTurn;
            EvaluateCheckerSpots();
        }
    }



    protected override void OnInitialized()
    {
        @* black Checkers *@
        for (int i = 0; i < 3; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                blackCheckers.Add(new CheckerClass
                {
                    Color = "black",
                    Column = j,
                    Row = i,
                    Direction = CheckerDirection.Down
                });
            }

        }
        @* white Checkers *@
        for (int i = 5; i < 8; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                whiteCheckers.Add(new CheckerClass
                {
                    Color = "white",
                    Column = j,
                    Row = i,
                    Direction = CheckerDirection.Up
                });
            }
        }
    }

    @* the turn for checkers *@
    bool whiteTurn = true;



    void checkerClick(CheckerClass checker)

    {
        if (whiteTurn && checker.Color == "black")
            return;
        if (!whiteTurn && checker.Color == "white")
            return;
        activeChecker = checker;
        EvaluateCheckerSpots();
    }
}



<div class="board">

    @for (int i = 0; i < newBoard.Row; i++)

    {
        int localI = i;
        <div class="Row">
            @for (int j = 0; j < newBoard.Column; j++)
            {
                int localJ = j;
                var checker = blackCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
                if (checker == null)
                {
                    checker = whiteCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
                }

                bool canMoveHere = cellsPossible.Contains((i, j));

                <div @onclick="() => MoveChecker( localI, localJ )" class="cell @( canMoveHere ? "active" : "" )">
                    @if (checker != null)

                    {
                        <div @onclick="() => checkerClick(checker)"
                            class="checker @checker.Color @(checker == activeChecker ? "active" : "" )">
                            @if (checker.Direction == CheckerDirection.Both)
                            {
                                <div class="king"></div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }

</div>