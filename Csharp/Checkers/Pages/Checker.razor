@* @using Checkers.Data; *@


@page "/checker"

<PageTitle>Checker</PageTitle>

<h2>Checker Board</h2>
@* creating the checkers from the class Checker*@

@code {
    List<CheckerClass> blackCheckers = new List<CheckerClass>();
    List<CheckerClass> whiteCheckers = new List<CheckerClass>();


    protected override void OnInitialized()
    {
        @* black Checkers *@
        for (int i = 0; i < 3; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                blackCheckers.Add(new CheckerClass
                {
                    Color = "black",
                    Column = j,
                    Row = i,
                    Direction = CheckerDirection.Down
                });
            }
        }
        @* white Checkers *@
        for (int i = 5; i < 8; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                whiteCheckers.Add(new CheckerClass
                {
                    Color = "white",
                    Column = j,
                    Row = i,
                    Direction = CheckerDirection.Up
                });
            }
        }
    
    }
    CheckerClass activeChecker = null;
        List<int> rowsOptions = new List<int>();
        List<int> coulmnsOptions = new List<int>();
    void CheckCheckerPosition()
    {
        rowsOptions.Clear();
        coulmnsOptions.Clear();
        if (activeChecker != null)
                {
                rowsOptions.Add(activeChecker.Row + (1* (activeChecker.Direction == CheckerDirection.Down ? 1 : -1)));
                coulmnsOptions.Add(activeChecker.Column -1);
                coulmnsOptions.Add(activeChecker.Column +1);
                }
    }
    void MoveChecker (int row, int column)
    {
        bool canMoveTo = rowsOptions.Contains(row) && coulmnsOptions.Contains(column);
        if (!canMoveTo)
        return;
        activeChecker.Column = column;
        activeChecker.Row = row;
        activeChecker = null;
    }

}


@* building the board *@
<div class="board">
    @for (int i = 0; i < 8; i++)
    {
        int cellI = i;
        <div class="boardRow">
            @for (int j = 0; j < 8; j++)
            {
                int cellJ = j;
                @* Console.WriteLine("cell i , j" +cellI +" "+ cellJ); *@
                var checker = blackCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
                if (checker == null)
                {
                    checker = whiteCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
                }

                bool canMoveTo = rowsOptions.Contains(i) && coulmnsOptions.Contains(j);
                

                <div @onclick="() => MoveChecker(cellI, cellJ)" class="boardCell @(canMoveTo ? "active" : "")">
                    @if (checker != null)
                    {
					<div @onclick="() => {activeChecker = checker; CheckCheckerPosition();}"
                        class="checker @checker.Color @(checker == activeChecker ? "active" : "" )">
					</div>
				}
                </div>
            }
        </div>
    }
</div>

@* @(checker == activeChecker ? "active" : " ") *@
